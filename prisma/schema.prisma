// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  name         String?
  role         Role      @default(USER)
  password     String
  refreshToken String?
  books        Book[]
  Article      Article[]
  Comment      Comment[]
}

model Book {
  id           Int            @id @default(autoincrement())
  title        String
  content      String?
  published    Boolean?       @default(false)
  owner        User?          @relation(fields: [ownerId], references: [id])
  ownerId      Int?
  bookCategory BookCategory[]
}

model Category {
  id           Int            @id @default(autoincrement())
  name         String
  bookCategory BookCategory[]
}

model BookCategory {
  id         Int       @id @default(autoincrement())
  book       Book?     @relation(fields: [bookId], references: [id])
  bookId     Int?
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  @@unique([bookId, categoryId])
}

model Article {
  id        Int       @id @default(autoincrement())
  title     String
  content   String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  Int
  Comment   Comment[]
}

model Comment {
  id          Int      @id @default(autoincrement())
  text        String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  commenter   User     @relation(fields: [commenterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commenterId Int
  article     Article  @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  articleId   Int
}

enum Role {
  USER
  ADMIN
}
